import re

# ВАЖНО: re очень предирчев к пробелам, их стоит соблюдать (Н: r"\+\d{1,3}" - работает, а r"\+\d{1, 3}" - не работает)

text = ""

match = re.match('Это', text)  # Ищет только в начале строки.
search = re.search("текст", text)  # Ищет по всему тексту, но выводит только 1 попавшийся.
findall = re.findall("текст", text)  # Ищет по всему тексту и выводит все найденные элементы.
split = re.split("текст", text, maxsplit=1)  # Делит текст по определенному элементу (копия split()), maxsplit = 2 (разделит 2 раза, а другие элементы для разделения проигнорирует)
sub = re.sub("текст", "тест", text)  # Подменивает определенный элемент в тексте на другой.
fullmatch = re.fullmatch("A", text)  # Проверяет равность 2 текстов, в данном случае тексты равны

point = re.search(r"a..d", text)  # Символ '.' заменяет любой другой символ, кроме символа новой строки
slash_d = re.search(r"\d", text)  # Символ '\d' заменяет любую цифру
slash_D = re.search(r"\D", text)  # Символ '\D' заменяет любой символ, кроме цифры
slash_s = re.search(r"\s", text)  # Символ '\s' заменяет пробел
slash_S = re.search(r"\S", text)  # Символ '\S' заменяет любой символ, кроме пробела (табуляции)
slash_w = re.search(r"\w", text)  # Символ '\w' заменяет любая буква, цифра или нижнее подчёркивание.
slash_W = re.search(r"\W", text)  # Символ '\W' заменяет любой символ, кроме букв, цифр или нижних подчёркиваний.
slash_b = re.search(r"\bgo", text)  # Символ '\b' указывает начало или конец какого либо слова.
slash_B = re.search(r"\Bo0", text)  # Символ '\B' не указывает границы слова.
slash_d_multiplication = re.search(r"\d*", text)  # Символ '*' заменяет 0 или более вхождений после \d
slash_d_plus = re.search(r"\d+", text)  # Символ '+' заменяет 1 или более вхождений после \d
range = re.search(r"[a'g]", text)  # Символ '[]' обозначает список элементов которые нужно искать (без запятой) + поддерживается диапозон (1-6, a-d)
back_range = re.search(r"[^a'g]", text)  # Символ '^' обозначает поиск всего, кроме того что в списке
func_or = re.search(r"a|b", text)  # Символ '|' обозначает or (найти или это, либо это (первое которое попадеться))
replay = re.search(r"\+\d{11}", text)  # Символ '{}' указывает сколько \d должно быть (якобы умножает), так же поддерживаеться диапозон - {1,3} (от 1 до 3 цифр)
replay_up = re.search(r"\+\d{,11}.", text) # Запятая после числа - не менее N раз, а до числа - не более N раз

